<!-- Zakir -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>All Staff</title>
    <link rel="stylesheet" href="/stylesheets/style.css">
</head>
<body>
    <header>
        <div class="navbar">
            <div class="navbar-left">
                <a href="/home">
                    <img src="/img/G5.png" alt="Company Logo" class="logo">
                </a>
                <a href="/admin/all_staff"><button class="nav-button active" aria-label="Navigate to staff management page">Staff</button></a>
                <a href="/admin/all_skills"><button class="nav-button" aria-label="Navigate to skills management page">Skills</button></a>
                <a href="/admin/all_skill_categories">
                    <button class="nav-button" aria-label="Navigate to skill categories page">Skill Categories</button>
                </a>
                <a href="/admin/all_departments"><button class="nav-button" aria-label="Navigate to department management page">Departments</button></a>
                <a href="/admin/all_job_roles"><button class="nav-button" aria-label="Go to job roles management page">Job Roles</button></a>
            </div>
            <div class="navbar-right">
                <form action="/logout" method="POST" style="display:inline;">
                    <button type="submit" class="logout-button" aria-label="Log out from the system">Log out</button>
                </form>
            </div>
        </div>
        <div class="admin-content">
            <div class="staff-table-container">
                <table class="staff-table">
                    <thead>
                        <tr>
                            <th></th>
                            <th>Name</th>
                            <th>Department</th>
                            <th>Job Role</th>
                            <th>Email</th>
                            <th>System Role</th>
                            <th>Date Joined</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% staffMembers.forEach(member => { %>
                            <tr>
                                <td>
                                    <input type="radio" name="selectedStaff" value="<%= member.user_id %>"
                                        aria-labelledby="staff-<%= member.user_id %>"
                                        data-firstname="<%= member.first_name %>"
                                        data-lastname="<%= member.last_name %>"
                                        data-department="<%= member.department.department_id %>"
                                        data-jobrole="<%= member.jobRole.job_role_id %>"
                                        data-email="<%= member.email %>"
                                        data-systemrole="<%= member.systemRole.system_role_id %>">
                                </td>
                                <td id="staff-<%= member.user_id %>"><%= member.first_name %> <%= member.last_name %></td>
                                <td><%= member.department.department_name %></td>
                                <td><%= member.jobRole.job_role_name %></td>
                                <td><%= member.email %></td>
                                <td><%= member.systemRole.system_role_name %></td>
                                <td><%= member.date_joined %></td>
                            </tr>
                        <% }); %>
                    </tbody>
                </table>
            </div>
        </div>
        <div class="action-buttons">
            <button id="viewSkillsBtn" class="view-skills-button blue-button" aria-label="View skills of selected staff member">View Selected User Skills</button>
            <button id="editUserBtn" class="edit-user-button purple-button" aria-label="Edit details of selected staff member">Edit Selected User</button>
            <button id="addUserBtn" class="add-user-button green-button" aria-label="Add a new staff member">Add New User</button>
            <button id="deleteUserBtn" class="delete-user-button red-button" aria-label="Delete selected staff member">Delete Selected User</button>
        </div>
        <div id="editUserModal" class="modal" role="dialog" aria-modal="true" aria-labelledby="editUserTitle">
            <div class="modal-content">
                <span class="close" aria-label="Close Modal">&times;</span>
                <h2 id="editUserTitle">Edit User</h2>
                <form id="editUserForm">
                    <input type="hidden" id="edit_user_id" name="user_id">
                    <div class="form-group">
                        <label for="first_name">First Name:</label>
                        <input type="text" id="first_name" name="first_name" required>
                    </div>
                    <div class="form-group">
                        <label for="last_name">Last Name:</label>
                        <input type="text" id="last_name" name="last_name" required>
                    </div>
                    <div class="form-group">
                        <label for="email">Email:</label>
                        <input type="email" id="email" name="email" required>
                    </div>
                    <div class="form-group">
                        <label for="department_id">Department:</label>
                        <select id="department_id" name="department_id" required></select>
                    </div>
                    <div class="form-group">
                        <label for="job_role_id">Job Role:</label>
                        <select id="job_role_id" name="job_role_id" required></select>
                    </div>
                    <div class="form-group">
                        <label for="system_role_id">System Role:</label>
                        <select id="system_role_id" name="system_role_id" required></select>
                    </div>
                    <button type="submit" class="submit-button">Save Changes</button>
                </form>
            </div>
        </div>
        <div id="addUserModal" class="modal" role="dialog" aria-modal="true" aria-labelledby="addUserTitle">
            <div class="modal-content">
                <span class="close" aria-label="Close Modal">&times;</span>
                <h2 id="addUserTitle">Add New User</h2>
                <form id="addUserForm">
                    <div class="form-group">
                        <label for="first_name">First Name:</label>
                        <input type="text" id="new_first_name" name="first_name" required>
                    </div>
                    <div class="form-group">
                        <label for="last_name">Last Name:</label>
                        <input type="text" id="new_last_name" name="last_name" required>
                    </div>
                    <div class="form-group">
                        <label for="email">Email:</label>
                        <input type="email" id="new_email" name="email" required>
                    </div>
                    <div class="form-group">
                        <label for="password">Password:</label>
                        <input type="password" id="new_password" name="password" required>
                    </div>
                    <div class="form-group">
                        <label for="department_id">Department:</label>
                        <select id="new_department_id" name="department_id" required></select>
                    </div>
                    <div class="form-group">
                        <label for="job_role_id">Job Role:</label>
                        <select id="new_job_role_id" name="job_role_id" required></select>
                    </div>
                    <div class="form-group">
                        <label for="system_role_id">System Role:</label>
                        <select id="new_system_role_id" name="system_role_id" required></select>
                    </div>
                    <button type="submit" class="submit-button">Add User</button>
                </form>
            </div>
        </div>
    </header>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const editUserBtn = document.getElementById("editUserBtn");
            const addUserBtn = document.getElementById("addUserBtn");
            const editUserModal = document.getElementById("editUserModal");
            const addUserModal = document.getElementById("addUserModal");
            const editUserForm = document.getElementById("editUserForm");
            const addUserForm = document.getElementById("addUserForm");
            const deleteUserBtn = document.getElementById("deleteUserBtn");
            const closeBtns = document.getElementsByClassName("close");
            const viewSkillsBtn = document.getElementById("viewSkillsBtn");

            editUserBtn.onclick = () => {
                const selectedStaff = document.querySelector('input[name="selectedStaff"]:checked');
                if (!selectedStaff) {
                    alert("Please select a staff member.");
                    return;
                }
                populateEditForm(selectedStaff);
                editUserModal.style.display = "block";
            };

            addUserBtn.onclick = () => {
                resetAddForm();
                populateDropdownsForAddUser();
                addUserModal.style.display = "block";
            };

            deleteUserBtn.onclick = () => {
                const selectedStaff = document.querySelector('input[name="selectedStaff"]:checked');
                if (!selectedStaff) {
                    alert("Please select a staff member to delete.");
                    return;
                }

                const confirmed = confirm("Are you sure you want to delete this user?");
                if (!confirmed) return;

                const userId = selectedStaff.value;
                deleteUser(userId);
            };

            viewSkillsBtn.onclick = () => {
                const selectedStaff = document.querySelector('input[name="selectedStaff"]:checked');
                if (!selectedStaff) {
                    alert("Please select a staff member.");
                    return;
                }

                const userId = selectedStaff.value;
                window.location.href = `/admin/view_staff_skills/${userId}`;
            };

            Array.from(closeBtns).forEach(btn => {
                btn.onclick = () => {
                    editUserModal.style.display = "none";
                    addUserModal.style.display = "none";
                };
            });

            editUserForm.addEventListener("submit", handleEditFormSubmission);

            addUserForm.addEventListener("submit", handleAddFormSubmission);

            async function populateEditForm(selectedStaff) {
                document.getElementById('edit_user_id').value = selectedStaff.value;
                document.getElementById('first_name').value = selectedStaff.getAttribute('data-firstname');
                document.getElementById('last_name').value = selectedStaff.getAttribute('data-lastname');
                document.getElementById('email').value = selectedStaff.getAttribute('data-email');
                
                const departmentId = selectedStaff.getAttribute('data-department');
                const jobRoleId = selectedStaff.getAttribute('data-jobrole');
                const systemRoleId = selectedStaff.getAttribute('data-systemrole');

                await populateDropdown('/api/departments', 'department_id', departmentId);
                await populateDropdown('/api/job_roles', 'job_role_id', jobRoleId);
                await populateDropdown('/api/system_roles', 'system_role_id', systemRoleId);
            }

            async function populateDropdownsForAddUser() {
                await populateDropdown('/api/departments', 'new_department_id');
                await populateDropdown('/api/job_roles', 'new_job_role_id');
                await populateDropdown('/api/system_roles', 'new_system_role_id');
            }

            function resetAddForm() {
                document.getElementById('new_first_name').value = '';
                document.getElementById('new_last_name').value = '';
                document.getElementById('new_email').value = '';
                document.getElementById('new_password').value = '';
                document.getElementById('new_department_id').innerHTML = '';
                document.getElementById('new_job_role_id').innerHTML = '';
                document.getElementById('new_system_role_id').innerHTML = '';
            }

            async function populateDropdown(url, selectId, selectedValue) {
                const selectElement = document.getElementById(selectId);
                try {
                    const response = await fetch(url);
                    const data = await response.json();

                    selectElement.innerHTML = '<option value="">Select</option>';
                    data.forEach(item => {
                        const option = document.createElement('option');
                        const idKey = selectId === 'department_id' || selectId === 'new_department_id' ? 'department_id' :
                                      selectId === 'job_role_id' || selectId === 'new_job_role_id' ? 'job_role_id' : 'system_role_id';
                        const nameKey = selectId === 'department_id' || selectId === 'new_department_id' ? 'department_name' :
                                        selectId === 'job_role_id' || selectId === 'new_job_role_id' ? 'job_role_name' : 'system_role_name';

                        option.value = item[idKey];
                        option.textContent = item[nameKey];

                        if (selectedValue && item[idKey].toString() === selectedValue.toString()) {
                            option.selected = true;
                        }

                        selectElement.appendChild(option);
                    });
                } catch (error) {
                    console.error(`Error populating ${selectId} dropdown:`, error);
                }
            }

            async function handleEditFormSubmission(e) {
                e.preventDefault();

                const formData = new FormData(editUserForm);
                const userData = Object.fromEntries(formData.entries());

                try {
                    const response = await fetch(`/admin/edit_staff/${userData.user_id}`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(userData),
                    });

                    if (response.ok) {
                        const updatedUser = await response.json();

                        updateTableRow(updatedUser);

                        alert("User updated successfully");
                        editUserModal.style.display = "none";
                    } else {
                        alert("Failed to update user");
                    }
                } catch (error) {
                    console.error('Error updating user:', error);
                    alert("An error occurred. Please try again.");
                }
            }

            function updateTableRow(updatedUser) {
                const selectedRow = document.querySelector(`input[name="selectedStaff"][value="${updatedUser.user_id}"]`).closest('tr');

                selectedRow.querySelector('td:nth-child(2)').textContent = `${updatedUser.first_name} ${updatedUser.last_name}`;
                selectedRow.querySelector('td:nth-child(3)').textContent = updatedUser.department.department_name;
                selectedRow.querySelector('td:nth-child(4)').textContent = updatedUser.jobRole.job_role_name;
                selectedRow.querySelector('td:nth-child(5)').textContent = updatedUser.email;
                selectedRow.querySelector('td:nth-child(6)').textContent = updatedUser.systemRole.system_role_name;
            }

            async function handleAddFormSubmission(e) {
                e.preventDefault();

                const formData = new FormData(addUserForm);
                const userData = Object.fromEntries(formData.entries());

                try {
                    const response = await fetch(`/admin/add_staff`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(userData),
                    });

                    if (response.ok) {
                        alert("User added successfully");
                        addUserModal.style.display = "none";
                        location.reload();
                    } else {
                        alert("Failed to add user");
                    }
                } catch (error) {
                    console.error('Error adding user:', error);
                    alert("An error occurred. Please try again.");
                }
            }

            async function deleteUser(userId) {
                try {
                    const response = await fetch(`/admin/delete_staff/${userId}`, {
                        method: 'DELETE',
                        headers: { 'Content-Type': 'application/json' },
                    });

                    if (response.ok) {
                        alert("User deleted successfully");
                        location.reload();
                    } else {
                        alert("Failed to delete user");
                    }
                } catch (error) {
                    console.error('Error deleting user:', error);
                    alert("An error occurred. Please try again.");
                }
            }
        });
    </script>
</body>
</html>
