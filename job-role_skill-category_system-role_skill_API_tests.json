{
	"info": {
		"_postman_id": "a14d4c27-4e9d-4545-b06a-13fc22a341fd",
		"name": "Johnathan's Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37030465"
	},
	"item": [
		{
			"name": "job_role",
			"item": [
				{
					"name": "Get job role by name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"test_job_role_name\", \"Test get job role by name \" + Date.now());\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: 'http://localhost:8900/api/job_roles',\r",
									"    method: 'POST',\r",
									"    header: {'Content-Type': 'application/json'},\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({ \"job_role_name\": pm.environment.get(\"test_job_role_name\") })\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    pm.test(\"Setup: Job role created successfully\", function() {\r",
									"        pm.expect(err).to.be.null;\r",
									"        pm.expect(res.code).to.equal(201);\r",
									"        var jsonData = res.json();\r",
									"        pm.environment.set(\"created_job_role_id\", jsonData.job_role_id);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Job role retrieved successfully by name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"    pm.expect(jsonData.length).to.be.at.least(1);\r",
									"    pm.expect(jsonData[0].job_role_name).to.eql(pm.environment.get(\"test_job_role_name\"));\r",
									"});\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: `http://localhost:8900/api/job_roles/${pm.environment.get(\"created_job_role_id\")}`,\r",
									"    method: 'DELETE'\r",
									"}, function (err, res) {\r",
									"    pm.test(\"Cleanup: Job role deleted successfully\", function () {\r",
									"        pm.expect(err).to.be.null;\r",
									"        pm.expect(res.code).to.equal(200);\r",
									"    });\r",
									"    \r",
									"    pm.environment.unset(\"created_job_role_id\");\r",
									"    pm.environment.unset(\"test_job_role_name\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8900/api/job_roles/name?job_role_name={{test_job_role_name}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8900",
							"path": [
								"api",
								"job_roles",
								"name"
							],
							"query": [
								{
									"key": "job_role_name",
									"value": "{{test_job_role_name}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all job roles",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Job roles have required properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    if (jsonData.length > 0) {\r",
									"        pm.expect(jsonData[0]).to.have.property('job_role_id');\r",
									"        pm.expect(jsonData[0]).to.have.property('job_role_name');\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8900/api/job_roles",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8900",
							"path": [
								"api",
								"job_roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new job role",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"new_job_role_name\", \"Test Job Role \" + Date.now());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Job role created successfully\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('job_role_id');\r",
									"    pm.expect(jsonData.job_role_name).to.eql(pm.environment.get(\"new_job_role_name\"));\r",
									"    pm.environment.set(\"created_job_role_id\", jsonData.job_role_id);\r",
									"});\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: `http://localhost:8900/api/job_roles/${pm.environment.get(\"created_job_role_id\")}`,\r",
									"    method: 'DELETE'\r",
									"}, function (err, res) {\r",
									"    pm.test(\"Cleanup: Job role deleted successfully\", function () {\r",
									"        pm.expect(err).to.be.null;\r",
									"        pm.expect(res.code).to.equal(200);\r",
									"    });\r",
									"    \r",
									"    pm.environment.unset(\"created_job_role_id\");\r",
									"    pm.environment.unset(\"new_job_role_name\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \"job_role_name\": \"{{new_job_role_name}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8900/api/job_roles",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8900",
							"path": [
								"api",
								"job_roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete job role",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"job_role_to_delete\", \"Job Role to Delete \" + Date.now());\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: 'http://localhost:8900/api/job_roles',\r",
									"    method: 'POST',\r",
									"    header: {'Content-Type': 'application/json'},\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({ \"job_role_name\": pm.environment.get(\"job_role_to_delete\") })\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    pm.expect(err).to.be.null;\r",
									"    pm.expect(res.code).to.equal(201);\r",
									"    var jsonData = res.json();\r",
									"    pm.environment.set(\"job_role_id_to_delete\", jsonData.job_role_id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Job role deleted successfully\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Job Role deleted successfully\");\r",
									"});\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: `http://localhost:8900/api/job_roles/${pm.environment.get(\"job_role_id_to_delete\")}`,\r",
									"    method: 'GET'\r",
									"}, function (err, res) {\r",
									"    pm.test(\"Verify job role is no longer in database\", function () {\r",
									"        pm.expect(res.code).to.equal(400);\r",
									"    });\r",
									"    \r",
									"    pm.environment.unset(\"job_role_id_to_delete\");\r",
									"    pm.environment.unset(\"job_role_to_delete\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8900/api/job_roles/{{job_role_id_to_delete}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8900",
							"path": [
								"api",
								"job_roles",
								"{{job_role_id_to_delete}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get job role by id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"new_job_role_name\", \"Test Job Role \" + Date.now());\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: 'http://localhost:8900/api/job_roles',\r",
									"    method: 'POST',\r",
									"    header: {'Content-Type': 'application/json'},\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({ \"job_role_name\": pm.environment.get(\"new_job_role_name\") })\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    pm.expect(err).to.be.null;\r",
									"    pm.expect(res.code).to.equal(201);\r",
									"    var jsonData = res.json();\r",
									"    pm.environment.set(\"created_job_role_id\", jsonData.job_role_id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Job role retrieved successfully\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.job_role_id).to.eql(parseInt(pm.environment.get(\"created_job_role_id\")));\r",
									"    pm.expect(jsonData.job_role_name).to.eql(pm.environment.get(\"new_job_role_name\"));\r",
									"});\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: `http://localhost:8900/api/job_roles/${pm.environment.get(\"created_job_role_id\")}`,\r",
									"    method: 'DELETE'\r",
									"}, function (err, res) {\r",
									"    pm.test(\"Cleanup: Job role deleted successfully\", function () {\r",
									"        pm.expect(err).to.be.null;\r",
									"        pm.expect(res.code).to.equal(200);\r",
									"    });\r",
									"    \r",
									"    pm.environment.unset(\"created_job_role_id\");\r",
									"    pm.environment.unset(\"new_job_role_name\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8900/api/job_roles/{{created_job_role_id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8900",
							"path": [
								"api",
								"job_roles",
								"{{created_job_role_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update job role",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"original_job_role_name\", \"Original Job Role \" + Date.now());\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: 'http://localhost:8900/api/job_roles',\r",
									"    method: 'POST',\r",
									"    header: {'Content-Type': 'application/json'},\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({ \"job_role_name\": pm.environment.get(\"original_job_role_name\") })\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    pm.expect(err).to.be.null;\r",
									"    pm.expect(res.code).to.equal(201);\r",
									"    var jsonData = res.json();\r",
									"    pm.environment.set(\"created_job_role_id\", jsonData.job_role_id);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"updated_job_role_name\", \"Updated Job Role \" + Date.now());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Job role updated successfully\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.job_role_id).to.eql(parseInt(pm.environment.get(\"created_job_role_id\")));\r",
									"    pm.expect(jsonData.job_role_name).to.eql(pm.environment.get(\"updated_job_role_name\"));\r",
									"});\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: `http://localhost:8900/api/job_roles/${pm.environment.get(\"created_job_role_id\")}`,\r",
									"    method: 'DELETE'\r",
									"}, function (err, res) {\r",
									"    pm.test(\"Cleanup: Job role deleted successfully\", function () {\r",
									"        pm.expect(err).to.be.null;\r",
									"        pm.expect(res.code).to.equal(200);\r",
									"    });\r",
									"    \r",
									"    pm.environment.unset(\"created_job_role_id\");\r",
									"    pm.environment.unset(\"original_job_role_name\");\r",
									"    pm.environment.unset(\"updated_job_role_name\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"job_role_id\": {{created_job_role_id}},\r\n    \"job_role_name\": \"{{updated_job_role_name}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8900/api/job_roles",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8900",
							"path": [
								"api",
								"job_roles"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "skill",
			"item": [
				{
					"name": "Create new skill",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"new_skill_name\", \"Test Skill \" + Date.now());\r",
									"pm.environment.set(\"skill_category_id\", 1);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Skill created successfully\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('skill_id');\r",
									"    pm.expect(jsonData.skill_name).to.eql(pm.environment.get(\"new_skill_name\"));\r",
									"    pm.environment.set(\"created_skill_id\", jsonData.skill_id);\r",
									"});\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: `http://localhost:8900/api/skills/${pm.environment.get(\"created_skill_id\")}`,\r",
									"    method: 'DELETE'\r",
									"}, function (err, res) {\r",
									"    pm.test(\"Cleanup: Skill deleted successfully\", function () {\r",
									"        pm.expect(err).to.be.null;\r",
									"        pm.expect(res.code).to.equal(200);\r",
									"    });\r",
									"\r",
									"    pm.environment.unset(\"created_skill_id\");\r",
									"    pm.environment.unset(\"new_skill_name\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"skill_name\": \"{{new_skill_name}}\",\r\n    \"skill_category_id\": {{skill_category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8900/api/skills",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8900",
							"path": [
								"api",
								"skills"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all skills",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Skills have required properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    if (jsonData.length > 0) {\r",
									"        pm.expect(jsonData[0]).to.have.property('skill_id');\r",
									"        pm.expect(jsonData[0]).to.have.property('skill_name');\r",
									"        pm.expect(jsonData[0]).to.have.property('skill_category_id');\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8900/api/skills",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8900",
							"path": [
								"api",
								"skills"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete skill",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"skill_to_delete\", \"Skill to Delete \" + Date.now());\r",
									"pm.environment.set(\"skill_category_id\", 1);\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: 'http://localhost:8900/api/skills',\r",
									"    method: 'POST',\r",
									"    header: {'Content-Type': 'application/json'},\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({ \r",
									"            \"skill_name\": pm.environment.get(\"skill_to_delete\"),\r",
									"            \"skill_category_id\": pm.environment.get(\"skill_category_id\")\r",
									"        })\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    pm.expect(err).to.be.null;\r",
									"    pm.expect(res.code).to.equal(201);\r",
									"    var jsonData = res.json();\r",
									"    pm.environment.set(\"skill_id_to_delete\", jsonData.skill_id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Skill deleted successfully\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Skill deleted successfully\");\r",
									"});\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: `http://localhost:8900/api/skills/${pm.environment.get(\"skill_id_to_delete\")}`,\r",
									"    method: 'GET'\r",
									"}, function (err, res) {\r",
									"    pm.test(\"Verify skill is no longer in database\", function () {\r",
									"        pm.expect(res.code).to.equal(400);\r",
									"    });\r",
									"    \r",
									"    pm.environment.unset(\"skill_id_to_delete\");\r",
									"    pm.environment.unset(\"skill_to_delete\");\r",
									"    pm.environment.unset(\"skill_category_id\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8900/api/skills/{{skill_id_to_delete}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8900",
							"path": [
								"api",
								"skills",
								"{{skill_id_to_delete}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get skill by id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"new_skill_name\", \"Test Skill \" + Date.now());\r",
									"pm.environment.set(\"skill_category_id\", 1);\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: 'http://localhost:8900/api/skills',\r",
									"    method: 'POST',\r",
									"    header: {'Content-Type': 'application/json'},\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({ \r",
									"            \"skill_name\": pm.environment.get(\"new_skill_name\"),\r",
									"            \"skill_category_id\": pm.environment.get(\"skill_category_id\")\r",
									"        })\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    pm.expect(err).to.be.null;\r",
									"    pm.expect(res.code).to.equal(201);\r",
									"    var jsonData = res.json();\r",
									"    pm.environment.set(\"created_skill_id\", jsonData.skill_id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Skill retrieved successfully\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.skill_id).to.eql(parseInt(pm.environment.get(\"created_skill_id\")));\r",
									"    pm.expect(jsonData.skill_name).to.eql(pm.environment.get(\"new_skill_name\"));\r",
									"});\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: `http://localhost:8900/api/skills/${pm.environment.get(\"created_skill_id\")}`,\r",
									"    method: 'DELETE'\r",
									"}, function (err, res) {\r",
									"    pm.test(\"Cleanup: Skill deleted successfully\", function () {\r",
									"        pm.expect(err).to.be.null;\r",
									"        pm.expect(res.code).to.equal(200);\r",
									"    });\r",
									"    \r",
									"    pm.environment.unset(\"created_skill_id\");\r",
									"    pm.environment.unset(\"new_skill_name\");\r",
									"    pm.environment.unset(\"skill_category_id\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8900/api/skills/{{created_skill_id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8900",
							"path": [
								"api",
								"skills",
								"{{created_skill_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get skill by name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"new_skill_name\", \"Test Skill for Name Search \" + Date.now());\r",
									"pm.environment.set(\"skill_category_id\", 1); \r",
									"\r",
									"pm.sendRequest({\r",
									"    url: 'http://localhost:8900/api/skills',\r",
									"    method: 'POST',\r",
									"    header: {'Content-Type': 'application/json'},\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({ \r",
									"            \"skill_name\": pm.environment.get(\"new_skill_name\"),\r",
									"            \"skill_category_id\": pm.environment.get(\"skill_category_id\")\r",
									"        })\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    pm.expect(err).to.be.null;\r",
									"    pm.expect(res.code).to.equal(201);\r",
									"    var jsonData = res.json();\r",
									"    pm.environment.set(\"created_skill_id\", jsonData.skill_id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Skill retrieved successfully by name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"    pm.expect(jsonData.length).to.be.at.least(1);\r",
									"    pm.expect(jsonData[0].skill_name).to.eql(pm.environment.get(\"new_skill_name\"));\r",
									"});\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: `http://localhost:8900/api/skills/${pm.environment.get(\"created_skill_id\")}`,\r",
									"    method: 'DELETE'\r",
									"}, function (err, res) {\r",
									"    pm.test(\"Cleanup: Skill deleted successfully\", function () {\r",
									"        pm.expect(err).to.be.null;\r",
									"        pm.expect(res.code).to.equal(200);\r",
									"    });\r",
									"\r",
									"    pm.environment.unset(\"created_skill_id\");\r",
									"    pm.environment.unset(\"new_skill_name\");\r",
									"    pm.environment.unset(\"skill_category_id\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8900/api/skills/name/{{new_skill_name}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8900",
							"path": [
								"api",
								"skills",
								"name",
								"{{new_skill_name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update skill",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"original_skill_name\", \"Original Skill \" + Date.now());\r",
									"pm.environment.set(\"skill_category_id\", 1);\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: 'http://localhost:8900/api/skills',\r",
									"    method: 'POST',\r",
									"    header: {'Content-Type': 'application/json'},\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({ \r",
									"            \"skill_name\": pm.environment.get(\"original_skill_name\"),\r",
									"            \"skill_category_id\": pm.environment.get(\"skill_category_id\")\r",
									"        })\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    pm.expect(err).to.be.null;\r",
									"    pm.expect(res.code).to.equal(201);\r",
									"    var jsonData = res.json();\r",
									"    pm.environment.set(\"created_skill_id\", jsonData.skill_id);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"updated_skill_name\", \"Updated Skill \" + Date.now());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Skill updated successfully\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.skill_id).to.eql(parseInt(pm.environment.get(\"created_skill_id\")));\r",
									"    pm.expect(jsonData.skill_name).to.eql(pm.environment.get(\"updated_skill_name\"));\r",
									"});\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: `http://localhost:8900/api/skills/${pm.environment.get(\"created_skill_id\")}`,\r",
									"    method: 'DELETE'\r",
									"}, function (err, res) {\r",
									"    pm.test(\"Cleanup: Skill deleted successfully\", function () {\r",
									"        pm.expect(err).to.be.null;\r",
									"        pm.expect(res.code).to.equal(200);\r",
									"    });\r",
									"    \r",
									"    pm.environment.unset(\"created_skill_id\");\r",
									"    pm.environment.unset(\"original_skill_name\");\r",
									"    pm.environment.unset(\"updated_skill_name\");\r",
									"    pm.environment.unset(\"skill_category_id\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"skill_id\": {{created_skill_id}},\r\n    \"skill_name\": \"{{updated_skill_name}}\",\r\n    \"skill_category_id\": {{skill_category_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8900/api/skills",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8900",
							"path": [
								"api",
								"skills"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get skill by category id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"test_category_name\", \"Test Category \" + Date.now());\r",
									"pm.environment.set(\"test_skill_name\", \"Test Skill \" + Date.now());\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: 'http://localhost:8900/api/skill_categories',\r",
									"    method: 'POST',\r",
									"    header: {'Content-Type': 'application/json'},\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({ \"skill_category_name\": pm.environment.get(\"test_category_name\") })\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    pm.expect(err).to.be.null;\r",
									"    pm.expect(res.code).to.equal(201);\r",
									"    var jsonData = res.json();\r",
									"    pm.environment.set(\"skill_category_id\", jsonData.skill_category_id);\r",
									"\r",
									"    pm.sendRequest({\r",
									"        url: 'http://localhost:8900/api/skills',\r",
									"        method: 'POST',\r",
									"        header: {'Content-Type': 'application/json'},\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({ \r",
									"                \"skill_name\": pm.environment.get(\"test_skill_name\"),\r",
									"                \"skill_category_id\": pm.environment.get(\"skill_category_id\")\r",
									"            })\r",
									"        }\r",
									"    }, function (err, res) {\r",
									"        pm.expect(err).to.be.null;\r",
									"        pm.expect(res.code).to.equal(201);\r",
									"        var jsonData = res.json();\r",
									"        pm.environment.set(\"created_skill_id\", jsonData.skill_id);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Skills retrieved successfully by category ID\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.be.at.least(1);\r",
									"    pm.expect(jsonData[0].skill_name).to.eql(pm.environment.get(\"test_skill_name\"));\r",
									"    pm.expect(jsonData[0].skill_category_id).to.eql(parseInt(pm.environment.get(\"skill_category_id\")));\r",
									"});\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: `http://localhost:8900/api/skills/${pm.environment.get(\"created_skill_id\")}`,\r",
									"    method: 'DELETE'\r",
									"}, function (err, res) {\r",
									"    pm.test(\"Cleanup: Skill deleted successfully\", function () {\r",
									"        pm.expect(err).to.be.null;\r",
									"        pm.expect(res.code).to.equal(200);\r",
									"    });\r",
									"\r",
									"    pm.sendRequest({\r",
									"        url: `http://localhost:8900/api/skill_categories/${pm.environment.get(\"skill_category_id\")}`,\r",
									"        method: 'DELETE'\r",
									"    }, function (err, res) {\r",
									"        pm.test(\"Cleanup: Skill category deleted successfully\", function () {\r",
									"            pm.expect(err).to.be.null;\r",
									"            pm.expect(res.code).to.equal(200);\r",
									"        });\r",
									"\r",
									"        pm.environment.unset(\"skill_category_id\");\r",
									"        pm.environment.unset(\"created_skill_id\");\r",
									"        pm.environment.unset(\"test_category_name\");\r",
									"        pm.environment.unset(\"test_skill_name\");\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8900/api/skills/category/{{skill_category_id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8900",
							"path": [
								"api",
								"skills",
								"category",
								"{{skill_category_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "skill_category",
			"item": [
				{
					"name": "Get all skill categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Skill categories have required properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    if (jsonData.length > 0) {\r",
									"        pm.expect(jsonData[0]).to.have.property('skill_category_id');\r",
									"        pm.expect(jsonData[0]).to.have.property('skill_category_name');\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8900/api/skill_categories",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8900",
							"path": [
								"api",
								"skill_categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new skill category",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"new_skill_category_name\", \"Test Skill Category \" + Date.now());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Skill category created successfully\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('skill_category_id');\r",
									"    pm.expect(jsonData.skill_category_name).to.eql(pm.environment.get(\"new_skill_category_name\"));\r",
									"    pm.environment.set(\"created_skill_category_id\", jsonData.skill_category_id);\r",
									"});\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: `http://localhost:8900/api/skill_categories/${pm.environment.get(\"created_skill_category_id\")}`,\r",
									"    method: 'DELETE'\r",
									"}, function (err, res) {\r",
									"    pm.test(\"Cleanup: Skill category deleted successfully\", function () {\r",
									"        pm.expect(err).to.be.null;\r",
									"        pm.expect(res.code).to.equal(200);\r",
									"    });\r",
									"    \r",
									"    pm.environment.unset(\"created_skill_category_id\");\r",
									"    pm.environment.unset(\"new_skill_category_name\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"skill_category_name\": \"{{new_skill_category_name}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8900/api/skill_categories",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8900",
							"path": [
								"api",
								"skill_categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete skill category",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"skill_category_to_delete\", \"Skill Category to Delete \" + Date.now());\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: 'http://localhost:8900/api/skill_categories',\r",
									"    method: 'POST',\r",
									"    header: {'Content-Type': 'application/json'},\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({ \"skill_category_name\": pm.environment.get(\"skill_category_to_delete\") })\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    pm.expect(err).to.be.null;\r",
									"    pm.expect(res.code).to.equal(201);\r",
									"    var jsonData = res.json();\r",
									"    pm.environment.set(\"skill_category_id_to_delete\", jsonData.skill_category_id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Skill category deleted successfully\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Skill Category deleted successfully\");\r",
									"});\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: `http://localhost:8900/api/skill_categories/${pm.environment.get(\"skill_category_id_to_delete\")}`,\r",
									"    method: 'GET'\r",
									"}, function (err, res) {\r",
									"    pm.test(\"Verify skill category is no longer in database\", function () {\r",
									"        pm.expect(res.code).to.equal(400);\r",
									"    });\r",
									"    \r",
									"    pm.environment.unset(\"skill_category_id_to_delete\");\r",
									"    pm.environment.unset(\"skill_category_to_delete\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8900/api/skill_categories/{{skill_category_id_to_delete}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8900",
							"path": [
								"api",
								"skill_categories",
								"{{skill_category_id_to_delete}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get skill category by id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"new_skill_category_name\", \"Test Skill Category \" + Date.now());\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: 'http://localhost:8900/api/skill_categories',\r",
									"    method: 'POST',\r",
									"    header: {'Content-Type': 'application/json'},\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({ \"skill_category_name\": pm.environment.get(\"new_skill_category_name\") })\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    pm.expect(err).to.be.null;\r",
									"    pm.expect(res.code).to.equal(201);\r",
									"    var jsonData = res.json();\r",
									"    pm.environment.set(\"created_skill_category_id\", jsonData.skill_category_id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Skill category retrieved successfully\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.skill_category_id).to.eql(parseInt(pm.environment.get(\"created_skill_category_id\")));\r",
									"    pm.expect(jsonData.skill_category_name).to.eql(pm.environment.get(\"new_skill_category_name\"));\r",
									"});\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: `http://localhost:8900/api/skill_categories/${pm.environment.get(\"created_skill_category_id\")}`,\r",
									"    method: 'DELETE'\r",
									"}, function (err, res) {\r",
									"    pm.test(\"Cleanup: Skill category deleted successfully\", function () {\r",
									"        pm.expect(err).to.be.null;\r",
									"        pm.expect(res.code).to.equal(200);\r",
									"    });\r",
									"    \r",
									"    pm.environment.unset(\"created_skill_category_id\");\r",
									"    pm.environment.unset(\"new_skill_category_name\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8900/api/skill_categories/{{created_skill_category_id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8900",
							"path": [
								"api",
								"skill_categories",
								"{{created_skill_category_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get skill category by name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"new_skill_category_name\", \"Test Skill Category for Name Search \" + Date.now());\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: 'http://localhost:8900/api/skill_categories',\r",
									"    method: 'POST',\r",
									"    header: {'Content-Type': 'application/json'},\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({ \"skill_category_name\": pm.environment.get(\"new_skill_category_name\") })\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    pm.expect(err).to.be.null;\r",
									"    pm.expect(res.code).to.equal(201);\r",
									"    var jsonData = res.json();\r",
									"    pm.environment.set(\"created_skill_category_id\", jsonData.skill_category_id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Skill category retrieved successfully by name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"    pm.expect(jsonData.length).to.be.at.least(1);\r",
									"    pm.expect(jsonData[0].skill_category_name).to.eql(pm.environment.get(\"new_skill_category_name\"));\r",
									"});\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: `http://localhost:8900/api/skill_categories/${pm.environment.get(\"created_skill_category_id\")}`,\r",
									"    method: 'DELETE'\r",
									"}, function (err, res) {\r",
									"    pm.test(\"Cleanup: Skill category deleted successfully\", function () {\r",
									"        pm.expect(err).to.be.null;\r",
									"        pm.expect(res.code).to.equal(200);\r",
									"    });\r",
									"    \r",
									"    pm.environment.unset(\"created_skill_category_id\");\r",
									"    pm.environment.unset(\"new_skill_category_name\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8900/api/skill_categories/name/{{new_skill_category_name}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8900",
							"path": [
								"api",
								"skill_categories",
								"name",
								"{{new_skill_category_name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update skill category",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"original_skill_category_name\", \"Original Skill Category \" + Date.now());\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: 'http://localhost:8900/api/skill_categories',\r",
									"    method: 'POST',\r",
									"    header: {'Content-Type': 'application/json'},\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({ \"skill_category_name\": pm.environment.get(\"original_skill_category_name\") })\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    pm.expect(err).to.be.null;\r",
									"    pm.expect(res.code).to.equal(201);\r",
									"    var jsonData = res.json();\r",
									"    pm.environment.set(\"created_skill_category_id\", jsonData.skill_category_id);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"updated_skill_category_name\", \"Updated Skill Category \" + Date.now());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Skill category updated successfully\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.skill_category_id).to.eql(parseInt(pm.environment.get(\"created_skill_category_id\")));\r",
									"    pm.expect(jsonData.skill_category_name).to.eql(pm.environment.get(\"updated_skill_category_name\"));\r",
									"});\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: `http://localhost:8900/api/skill_categories/${pm.environment.get(\"created_skill_category_id\")}`,\r",
									"    method: 'DELETE'\r",
									"}, function (err, res) {\r",
									"    pm.test(\"Cleanup: Skill category deleted successfully\", function () {\r",
									"        pm.expect(err).to.be.null;\r",
									"        pm.expect(res.code).to.equal(200);\r",
									"    });\r",
									"    \r",
									"    pm.environment.unset(\"created_skill_category_id\");\r",
									"    pm.environment.unset(\"original_skill_category_name\");\r",
									"    pm.environment.unset(\"updated_skill_category_name\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"skill_category_id\": {{created_skill_category_id}},\r\n    \"skill_category_name\": \"{{updated_skill_category_name}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8900/api/skill_categories",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8900",
							"path": [
								"api",
								"skill_categories"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "system_role",
			"item": [
				{
					"name": "Get all system roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"System roles have required properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    if (jsonData.length > 0) {\r",
									"        pm.expect(jsonData[0]).to.have.property('system_role_id');\r",
									"        pm.expect(jsonData[0]).to.have.property('system_role_name');\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8900/api/system_roles",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8900",
							"path": [
								"api",
								"system_roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new system role",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"new_system_role_name\", \"Test System Role \" + Date.now());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"System role created successfully\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('system_role_id');\r",
									"    pm.expect(jsonData.system_role_name).to.eql(pm.environment.get(\"new_system_role_name\"));\r",
									"    pm.environment.set(\"created_system_role_id\", jsonData.system_role_id);\r",
									"});\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: `http://localhost:8900/api/system_roles/${pm.environment.get(\"created_system_role_id\")}`,\r",
									"    method: 'DELETE'\r",
									"}, function (err, res) {\r",
									"    pm.test(\"Cleanup: System role deleted successfully\", function () {\r",
									"        pm.expect(err).to.be.null;\r",
									"        pm.expect(res.code).to.equal(200);\r",
									"    });\r",
									"    \r",
									"    pm.environment.unset(\"created_system_role_id\");\r",
									"    pm.environment.unset(\"new_system_role_name\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"system_role_name\": \"{{new_system_role_name}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8900/api/system_roles",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8900",
							"path": [
								"api",
								"system_roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get system role by id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"new_system_role_name\", \"Test System Role \" + Date.now());\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: 'http://localhost:8900/api/system_roles',\r",
									"    method: 'POST',\r",
									"    header: {'Content-Type': 'application/json'},\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({ \"system_role_name\": pm.environment.get(\"new_system_role_name\") })\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    pm.expect(err).to.be.null;\r",
									"    pm.expect(res.code).to.equal(201);\r",
									"    var jsonData = res.json();\r",
									"    pm.environment.set(\"created_system_role_id\", jsonData.system_role_id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"System role retrieved successfully\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.system_role_id).to.eql(parseInt(pm.environment.get(\"created_system_role_id\")));\r",
									"    pm.expect(jsonData.system_role_name).to.eql(pm.environment.get(\"new_system_role_name\"));\r",
									"});\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: `http://localhost:8900/api/system_roles/${pm.environment.get(\"created_system_role_id\")}`,\r",
									"    method: 'DELETE'\r",
									"}, function (err, res) {\r",
									"    pm.test(\"Cleanup: System role deleted successfully\", function () {\r",
									"        pm.expect(err).to.be.null;\r",
									"        pm.expect(res.code).to.equal(200);\r",
									"    });\r",
									"    \r",
									"    pm.environment.unset(\"created_system_role_id\");\r",
									"    pm.environment.unset(\"new_system_role_name\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8900/api/system_roles/{{created_system_role_id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8900",
							"path": [
								"api",
								"system_roles",
								"{{created_system_role_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get system role by name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"new_system_role_name\", \"Test System Role for Name Search \" + Date.now());\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: 'http://localhost:8900/api/system_roles',\r",
									"    method: 'POST',\r",
									"    header: {'Content-Type': 'application/json'},\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({ \"system_role_name\": pm.environment.get(\"new_system_role_name\") })\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    pm.expect(err).to.be.null;\r",
									"    pm.expect(res.code).to.equal(201);\r",
									"    var jsonData = res.json();\r",
									"    pm.environment.set(\"created_system_role_id\", jsonData.system_role_id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"System role retrieved successfully by name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"    pm.expect(jsonData.length).to.be.at.least(1);\r",
									"    pm.expect(jsonData[0].system_role_name).to.eql(pm.environment.get(\"new_system_role_name\"));\r",
									"});\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: `http://localhost:8900/api/system_roles/${pm.environment.get(\"created_system_role_id\")}`,\r",
									"    method: 'DELETE'\r",
									"}, function (err, res) {\r",
									"    pm.test(\"Cleanup: System role deleted successfully\", function () {\r",
									"        pm.expect(err).to.be.null;\r",
									"        pm.expect(res.code).to.equal(200);\r",
									"    });\r",
									"    \r",
									"    pm.environment.unset(\"created_system_role_id\");\r",
									"    pm.environment.unset(\"new_system_role_name\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8900/api/system_roles/name/{{new_system_role_name}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8900",
							"path": [
								"api",
								"system_roles",
								"name",
								"{{new_system_role_name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update system role",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"original_system_role_name\", \"Original System Role \" + Date.now());\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: 'http://localhost:8900/api/system_roles',\r",
									"    method: 'POST',\r",
									"    header: {'Content-Type': 'application/json'},\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({ \"system_role_name\": pm.environment.get(\"original_system_role_name\") })\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    pm.expect(err).to.be.null;\r",
									"    pm.expect(res.code).to.equal(201);\r",
									"    var jsonData = res.json();\r",
									"    pm.environment.set(\"created_system_role_id\", jsonData.system_role_id);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"updated_system_role_name\", \"Updated System Role \" + Date.now());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"System role updated successfully\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.system_role_id).to.eql(parseInt(pm.environment.get(\"created_system_role_id\")));\r",
									"    pm.expect(jsonData.system_role_name).to.eql(pm.environment.get(\"updated_system_role_name\"));\r",
									"});\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: `http://localhost:8900/api/system_roles/${pm.environment.get(\"created_system_role_id\")}`,\r",
									"    method: 'DELETE'\r",
									"}, function (err, res) {\r",
									"    pm.test(\"Cleanup: System role deleted successfully\", function () {\r",
									"        pm.expect(err).to.be.null;\r",
									"        pm.expect(res.code).to.equal(200);\r",
									"    });\r",
									"    \r",
									"    pm.environment.unset(\"created_system_role_id\");\r",
									"    pm.environment.unset(\"original_system_role_name\");\r",
									"    pm.environment.unset(\"updated_system_role_name\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"system_role_id\": {{created_system_role_id}},\r\n    \"system_role_name\": \"{{updated_system_role_name}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8900/api/system_roles",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8900",
							"path": [
								"api",
								"system_roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete system role",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"system_role_to_delete\", \"System Role to Delete \" + Date.now());\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: 'http://localhost:8900/api/system_roles',\r",
									"    method: 'POST',\r",
									"    header: {'Content-Type': 'application/json'},\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({ \"system_role_name\": pm.environment.get(\"system_role_to_delete\") })\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    pm.expect(err).to.be.null;\r",
									"    pm.expect(res.code).to.equal(201);\r",
									"    var jsonData = res.json();\r",
									"    pm.environment.set(\"system_role_id_to_delete\", jsonData.system_role_id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"System role deleted successfully\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"System Role deleted successfully\");\r",
									"});\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: `http://localhost:8900/api/system_roles/${pm.environment.get(\"system_role_id_to_delete\")}`,\r",
									"    method: 'GET'\r",
									"}, function (err, res) {\r",
									"    pm.test(\"Verify system role is no longer in database\", function () {\r",
									"        pm.expect(res.code).to.equal(400);\r",
									"    });\r",
									"    \r",
									"    pm.environment.unset(\"system_role_id_to_delete\");\r",
									"    pm.environment.unset(\"system_role_to_delete\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8900/api/system_roles/{{system_role_id_to_delete}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8900",
							"path": [
								"api",
								"system_roles",
								"{{system_role_id_to_delete}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}